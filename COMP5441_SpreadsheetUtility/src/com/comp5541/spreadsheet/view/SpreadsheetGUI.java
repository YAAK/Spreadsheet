package com.comp5541.spreadsheet.view;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.table.TableModel;

import com.comp5541.spreadsheet.controller.Controller;
import com.comp5541.spreadsheet.model.Cell;

public class SpreadsheetGUI extends javax.swing.JFrame implements MouseListener, KeyListener{
	
	// Variables declaration - do not modify
    private javax.swing.JTextField inputLineTextField;
    private javax.swing.JLabel inputLineLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable spreadsheetTable;
    // End of variables declaration

	/**
     * Creates new form SpreadsheetGUI
     */
    public SpreadsheetGUI() {
        initComponents();
    }
	
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        inputLineLabel = new javax.swing.JLabel();
        inputLineTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        spreadsheetTable = new javax.swing.JTable();
        messageLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Spreadsheet");
        setPreferredSize(new java.awt.Dimension(830, 600));
        setResizable(false);

        inputLineLabel.setText("Cell Content");
        
        inputLineTextField.addKeyListener(this);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(375, 352));

        /*
        spreadsheetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null, null, null, null, null, null, null, null, null, null, null},
                {"2", null, null, null, null, null, null, null, null, null, null, null},
                {"3", null, null, null, null, null, null, null, null, null, null, null},
                {"4", null, null, null, null, null, null, null, null, null, null, null},
                {"5", null, null, null, null, null, null, null, null, null, null, null},
                {"6", null, null, null, null, null, null, null, null, null, null, null},
                {"7", null, null, null, null, null, null, null, null, null, null, null},
                {"8", null, null, null, null, null, null, null, null, null, null, null},
                {"9", null, null, null, null, null, null, null, null, null, null, null},
                {"10", null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Row", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });*/
        spreadsheetTable.setColumnSelectionAllowed(true);
        spreadsheetTable.addMouseListener(this);
        spreadsheetTable.setName(""); // NOI18N
        spreadsheetTable.setPreferredSize(new java.awt.Dimension(800, 320));
        spreadsheetTable.setRowHeight(32);
        jScrollPane1.setViewportView(spreadsheetTable);
        spreadsheetTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        saveButton.setText("Save");
        saveButton.addMouseListener(this);

        loadButton.setText("Load");
        loadButton.addMouseListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputLineLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputLineTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {loadButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLineLabel)
                    .addComponent(inputLineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
    
    /**
     * Method to set the model for the view - to be used by controller
     * @param model TableModel
     */
	public void setModel(TableModel model)
	{
		spreadsheetTable.setModel(model);
	}

	/**
	 * Method to 
	 * - display cell name when a cell has been selected by mouse click
	 * - call controller to save a file when save button is clicked
	 * - call controller to load a file when load button is clicked
	 */
	@Override
	public void mouseClicked(MouseEvent e)
	{
		Controller controller = Controller.getInstance();
		
		//to save a file
		if(e.getSource().getClass() == javax.swing.JButton.class && (javax.swing.JButton)e.getSource() == this.saveButton)
		{
			controller.saveSpreadsheetToFile(this.inputLineTextField.getText().trim());
		}
		
		//to load a file
		else if(e.getSource().getClass() == javax.swing.JButton.class && (javax.swing.JButton)e.getSource() == this.loadButton)
		{
			controller.loadSpreadsheetFromFile(this.inputLineTextField.getText().trim());
		}
		
		//to show selected cell name before the input line
		else
		{
			int row = spreadsheetTable.getSelectedRow();
			int col = spreadsheetTable.getSelectedColumn();
			if(row != -1 && col > 0)
			{
				Cell selectedCell = controller.selectCell(row, col);
				this.inputLineLabel.setText(selectedCell.getCellname());
			}
		}
	}

	/**
	 * Method to detect when the user presses and releases the "Enter" key on the input line
	 */
	@Override
	public void keyReleased(KeyEvent e)
	{
		if(e.getKeyCode() == KeyEvent.VK_ENTER)
		{
			if(!inputLineLabel.getText().contains(".txt"))
			{
				Controller controller = Controller.getInstance();
				Cell cell = controller.getselectedCell();
				
				//if a cell is selected
				if(cell != null)
				{
					//enter cell content and compute value
					controller.enterCellContent(cell.getRow(), cell.getColumn(), inputLineTextField.getText());
					inputLineTextField.setText("");
				}
			}
		}
	}
	
	/**
	 * Method to display a message to the user
	 */
	public void displayMessage(String message)
	{
		messageLabel.setText(message);
	}
	/**
	 * Method required for implementing MouseListener
	 */
	@Override
	public void mouseEntered(MouseEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}

	/**
	 * Method required for implementing MouseListener
	 */
	@Override
	public void mouseExited(MouseEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}

	/**
	 * Method required for implementing MouseListener
	 */
	@Override
	public void mousePressed(MouseEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}

	/**
	 * Method required for implementing MouseListener
	 */
	@Override
	public void mouseReleased(MouseEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}

	/**
	 * Method required for implementing KeyListener
	 */
	@Override
	public void keyPressed(KeyEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}

	/**
	 * Method required for implementing KeyListener
	 */
	@Override
	public void keyTyped(KeyEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}
}
